/*This is the PID definition, Kp, Ki and Kd are proportional, integral and differential gains
    float PID_Out = Kp * actual_error + Ki * SUM(previous_errors) + Kd * (actual_error - last_error);
    Define the error: actual_error = set_point - measured_value;
*/

//Variables
const float Kp = 1;
const float Ki = 0;
const float Kd = 0 ;
float actual_error, error_previous, P, I, D, iMin, iMax;

float PID_Controller(float set_point, float measured_value){
actual_error = set_point - measured_value;
// PID
P  = actual_error;   //Current error
I += error_previous;  //Sum of previous errors
D  = actual_error - error_previous;  //Difference with previous error

// windup
if(I < iMin){ I = iMin; }
else if(I > iMax){ I = iMax; }

return Kp*P + Ki*I + Kd*D;
error_previous = actual_error;  //error_previous holds the previous error
}